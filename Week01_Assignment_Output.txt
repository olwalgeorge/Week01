===============================================================================
WEEK 01 ASSIGNMENT OUTPUT
Student: George Olwal
Date: October 29, 2025
===============================================================================

===============================================================================
PART 1: Web API with ASP.NET Core Controllers - Pizza Store
===============================================================================

OVERVIEW:
---------
This section demonstrates the creation and execution of a RESTful web API 
using ASP.NET Core controllers. The Pizza Store API manages a collection of 
pizza records and provides full CRUD (Create, Read, Update, Delete) operations.

IMPLEMENTED API ENDPOINTS:
--------------------------
- GET /Pizza          - Returns all pizzas
- GET /Pizza/{id}     - Returns a specific pizza by ID
- POST /Pizza         - Creates a new pizza
- PUT /Pizza/{id}     - Updates an existing pizza
- DELETE /Pizza/{id}  - Deletes a pizza

PIZZA RECORDS IN DATABASE:
---------------------------
The application includes 4 pizza records:
1. Classic Italian - Gluten-Free: No
2. Veggie - Gluten-Free: Yes
3. Veggie - Gluten-Free: Yes
3. Meat Lovers Supreme - Gluten-Free: No
4. Hawaiian - Gluten-Free: No *** ADDITIONAL RECORD ADDED ***

APPLICATION STARTUP OUTPUT:
---------------------------
C:\Users\PC\byu classwork\CSE325\Week01\PizzaStore> dotnet run --urls "http://localhost:5000"
Building...
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: http://localhost:5000
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Development
info: Microsoft.Hosting.Lifetime[0]
      Content root path: C:\Users\PC\byu classwork\CSE325\Week01\PizzaStore

API TEST RESULTS - GET /Pizza:
-------------------------------
Request: GET http://localhost:5000/Pizza
Response: 200 OK

[
  {
    "id": 1,
    "name": "Classic Italian",
    "isGlutenFree": false
  },
  {
    "id": 2,
    "name": "Veggie",
    "isGlutenFree": true
  },
  {
    "id": 3,
    "name": "Meat Lovers Supreme",
    "isGlutenFree": false
  },
  {
    "id": 4,
    "name": "Hawaiian",
    "isGlutenFree": false
  }
]

VERIFICATION:
-------------
✓ Application successfully builds and runs
✓ API responds to HTTP requests
✓ All 4 pizza records are present (including the Hawaiian pizza addition)
✓ JSON serialization works correctly
✓ RESTful endpoints are properly configured

===============================================================================
PART 2: Files and Directories - Sales Summary Report Generator
===============================================================================

OVERVIEW:
---------
This section demonstrates working with the file system in C# to read multiple
files, process their contents, calculate totals, and generate a formatted
summary report. The application reads sales data from individual store files
and creates a consolidated report.

APPLICATION EXECUTION OUTPUT:
------------------------------
C:\Users\PC\byu classwork\CSE325\Week01\FilesAndDirectories> dotnet run
Files in stores directory:
stores\201.txt
stores\202.txt
stores\203.txt
stores\204.txt

Total Sales: $616.49

Sales summary report generated: SalesSummary.txt

GENERATED REPORT (SalesSummary.txt):
-------------------------------------
Sales Summary
----------------------------
 Total Sales: $616.49

 Details:
  201.txt: $100.50
  202.txt: $250.75
  203.txt: $175.25
  204.txt: $89.99

COMPLETE WORKING CODE:
-----------------------

static void GenerateSalesSummaryReport(string salesDirectory)
{
    var reportBuilder = new StringBuilder();
    double totalSales = 0;
    
    // Header
    reportBuilder.AppendLine("Sales Summary");
    reportBuilder.AppendLine("----------------------------");

    // Get all sales files and calculate total
    string[] salesFiles = Directory.GetFiles(salesDirectory, "*.txt");
    var fileDetails = new List<(string fileName, double amount)>();

    foreach (string file in salesFiles)
    {
        string salesText = File.ReadAllText(file);
        if (double.TryParse(salesText, out double salesAmount))
        {
            totalSales += salesAmount;
            string fileName = Path.GetFileName(file);
            fileDetails.Add((fileName, salesAmount));
        }
    }

    // Add total to report
    reportBuilder.AppendLine($" Total Sales: {totalSales:C}");
    reportBuilder.AppendLine();
    reportBuilder.AppendLine(" Details:");

    // Add individual file details
    foreach (var (fileName, amount) in fileDetails)
    {
        reportBuilder.AppendLine($"  {fileName}: {amount:C}");
    }

    // Write report to file
    File.WriteAllText("SalesSummary.txt", reportBuilder.ToString());
}

HOW THE FUNCTION WORKS:
------------------------
1. Creates a StringBuilder to efficiently build the report content
2. Scans the specified directory for all .txt files
3. Reads and parses the sales amount from each file
4. Accumulates the total sales across all stores
5. Stores individual file details for the breakdown section
6. Formats the report with a header, grand total, and itemized details
7. Writes the complete formatted report to "SalesSummary.txt"

KEY C# CONCEPTS DEMONSTRATED:
------------------------------
- File I/O operations (Directory.GetFiles, File.ReadAllText, File.WriteAllText)
- String manipulation with StringBuilder
- Collection types (List with tuples)
- Data parsing (double.TryParse)
- String formatting (currency formatting with :C)
- Tuple deconstruction in foreach loops

VERIFICATION:
-------------
✓ Application successfully finds all 4 store files
✓ Sales amounts are correctly parsed from each file
✓ Total sales calculated correctly: $616.49
✓ Report file generated with proper formatting
✓ Individual store breakdowns are accurate

===============================================================================
END OF DOCUMENT
===============================================================================
