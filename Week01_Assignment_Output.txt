CSE325 Week 01 Assignment Output
================================================================================

PART 1: Web API with ASP.NET Core Controllers Output
================================================================================

The Pizza Store Web API has been created and tested with the following pizzas:

Initial Pizzas (from PizzaService.cs):
--------------------------------------
1. Classic Italian (Not Gluten Free)
2. Veggie (Gluten Free)
3. Meat Lovers Supreme (Not Gluten Free)

Additional Pizza Record Added (shown in PizzaController.cs):
-----------------------------------------------------------
4. Hawaiian (Not Gluten Free)

Complete Pizza List After Addition:
-----------------------------------
[
  {
    "id": 1,
    "name": "Classic Italian",
    "isGlutenFree": false
  },
  {
    "id": 2,
    "name": "Veggie",
    "isGlutenFree": true
  },
  {
    "id": 3,
    "name": "Meat Lovers Supreme",
    "isGlutenFree": false
  },
  {
    "id": 4,
    "name": "Hawaiian",
    "isGlutenFree": false
  }
]

API Endpoints Available:
-----------------------
GET    /Pizza          - Get all pizzas
GET    /Pizza/{id}     - Get pizza by ID
POST   /Pizza          - Create new pizza
PUT    /Pizza/{id}     - Update existing pizza
DELETE /Pizza/{id}     - Delete pizza


================================================================================
PART 2: Sales Summary Function Code
================================================================================

The following is the working GenerateSalesSummaryReport function from 
FilesAndDirectories/Program.cs:

```csharp
static void GenerateSalesSummaryReport(string salesDirectory)
{
    var reportBuilder = new StringBuilder();
    double totalSales = 0;
    
    // Header
    reportBuilder.AppendLine("Sales Summary");
    reportBuilder.AppendLine("----------------------------");

    // Get all sales files and calculate total
    string[] salesFiles = Directory.GetFiles(salesDirectory, "*.txt");
    var fileDetails = new List<(string fileName, double amount)>();

    foreach (string file in salesFiles)
    {
        string salesText = File.ReadAllText(file);
        if (double.TryParse(salesText, out double salesAmount))
        {
            totalSales += salesAmount;
            string fileName = Path.GetFileName(file);
            fileDetails.Add((fileName, salesAmount));
        }
    }

    // Add total to report
    reportBuilder.AppendLine($" Total Sales: {totalSales:C}");
    reportBuilder.AppendLine();
    reportBuilder.AppendLine(" Details:");

    // Add individual file details
    foreach (var (fileName, amount) in fileDetails)
    {
        reportBuilder.AppendLine($"  {fileName}: {amount:C}");
    }

    // Write report to file
    File.WriteAllText("SalesSummary.txt", reportBuilder.ToString());
}
```

Sample Output from SalesSummary.txt:
------------------------------------
Sales Summary
----------------------------
 Total Sales: $616.49

 Details:
  201.txt: $100.50
  202.txt: $250.75
  203.txt: $175.25
  204.txt: $89.99


================================================================================
Function Description:
--------------------
The GenerateSalesSummaryReport function:
1. Creates a StringBuilder to build the report content
2. Reads all .txt files in the sales directory
3. Parses the sales amount from each file
4. Calculates the total sales from all files
5. Formats the output with a header, total sales, and individual file details
6. Writes the complete report to "SalesSummary.txt"

The function uses:
- StringBuilder for efficient string concatenation
- Directory.GetFiles() to get all .txt files
- File.ReadAllText() to read file contents
- double.TryParse() for safe number parsing
- Currency formatting ({amount:C}) for monetary values
- Tuples to store file details (fileName, amount)

================================================================================
End of Document
================================================================================
